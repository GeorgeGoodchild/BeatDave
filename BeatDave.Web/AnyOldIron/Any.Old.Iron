//
// Use this file placeholder to upload any new classes that you may write whilst at work (as we can't create new files on GitHub from there)
// so you can get them checked in and then sorted at home later.
//

//
// Location:
// Infrastructure/Validation
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Http.ModelBinding;

namespace BeatDave.Web.Infrastructure
{
    public static class ModelStateExtensions
    {
        public static string FirstErrorMessage(this ModelStateDictionary modelState)
        {
            var state = modelState.Values.FirstOrDefault(x => x.Errors.Count > 0);

            if (state == null) 
                return null;

            var message = state.Errors
                               .Where(error => string.IsNullOrEmpty(error.ErrorMessage) == false)
                               .Select(error => error.ErrorMessage)
                               .FirstOrDefault();
            
            return message;
        }
    }
}


//
// Location:
// Infrastructure/AutoMapper
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using AutoMapper;

namespace BeatDave.Web.Infrastructure
{
    public static class AutoMapperExtensions
    {
        public static TMapTo MapTo<TMapTo>(this object mapFrom)
        {
            if (mapFrom == null)
                throw new ArgumentNullException();

            return (TMapTo)Mapper.Map(mapFrom, mapFrom.GetType(), typeof(TMapTo));
        }

        public static TMapTo MapToInstance<TMapTo>(this object mapFrom, TMapTo mapTo)
        {
            if (mapFrom == null)
                throw new ArgumentNullException();

            return (TMapTo)Mapper.Map(mapFrom, mapTo, mapFrom.GetType(), typeof(TMapTo));
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using AutoMapper;
using System.Web.Mvc;

namespace BeatDave.Web.Infrastructure
{
    public class AutoMapperConfiguration
    {
        public static void Configure()
        {
            Mapper.CreateMap<string, MvcHtmlString>().ConvertUsing<MvcHtmlStringConverter>();

            Mapper.AddProfile<DataSetProfile>();
        }
    }
}


//
// Location:
// Infrastructure/AutoMapper/Resolvers
//
using AutoMapper;
using System.Web.Mvc;
using System.Text.RegularExpressions;

namespace BeatDave.Web.Infrastructure
{
    public class RavenIdResolver
    {
        public static int Resolve(string ravenId)
        {
            var match = Regex.Match(ravenId, @"\d+");
            var idStr = match.Value;

            int id = int.Parse(idStr);

            if (id <= 0)
                throw new System.InvalidOperationException("Id cannot be less than or equal to zero.");

            return id;
        }
    }
}

using AutoMapper;
using System.Web.Mvc;

namespace BeatDave.Web.Infrastructure
{
    public class MvcHtmlStringConverter : TypeConverter<string, MvcHtmlString>
    {
        protected override MvcHtmlString ConvertCore(string source)
        {
            return MvcHtmlString.Create(source);
        }
    }
}


//
// Location:
// Infrastructure/AutoMapper/Profiles
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using AutoMapper;
using BeatDave.Web.Areas.Api_v1.Models;
using BeatDave.Web.Models;

namespace BeatDave.Web.Infrastructure
{
    public class DataSetProfile : Profile
    {
        protected override void Configure()
        {
            //
            // DataSetInput -> Model
            //
            Mapper.CreateMap<DataSetInput, DataSet>()
                .ForMember(t => t.Id, o => o.Ignore())
                .ForMember(t => t.AutoShareOn, o => o.Ignore())
                .ForMember(t => t.DataPoints, o => o.Ignore())
                .ForMember(t => t.OwnerId, o => o.Ignore());   // TODO: Create resolver to get value from the current auth user 

            Mapper.CreateMap<DataSetInput.UnitsInput, Units>();

            //
            // Model -> DataSetView
            //
            Mapper.CreateMap<DataSet, DataSetView>()
                .ForMember(t => t.Id, o => o.MapFrom(s => RavenIdResolver.Resolve(s.Id)))
                .ForMember(t => t.Owner, o => o.Ignore());

            Mapper.CreateMap<Units, DataSetView.UnitsView>();
            
            Mapper.CreateMap<DataPoint, DataSetView.DataPointView>();
            
            Mapper.CreateMap<ISocialNetworkAccount, DataSetView.SocialNetworkAccountView>()
                .ForMember(t => t.NetworkName, o => o.MapFrom(s => s.SocialNetworkName))
                .ForMember(t => t.UserName, o => o.Ignore());   // TODO: This can't just be ignored

            Mapper.CreateMap<User, DataSetView.OwnerView>()
                .ForMember(t => t.Id, o => o.MapFrom(s => RavenIdResolver.Resolve(s.Id)))
                .ForMember(t => t.OwnerName, o => o.MapFrom(s => s.FirstName + " " + s.LastName));
        }
    }
}